#!/bin/sh

LINT=$(which swiftlint)

if [[ -e "${LINT}" ]]; then
    echo "🚀  SwiftLint Start..."
    echo "🔍  lint Application Path: $(pwd)"
else
    echo "SwiftLint is not exist, please check. 🌐 https://github.com/realm/SwiftLint"
    exit 1
fi

normalfiles=$(git diff --stat --cached)
targets=$(git diff --stat --cached --diff-filter=d --name-only $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)) | grep -F ".swift")

if [ -n "$normalfiles" -a -z "$targets" ]; then
  printf "✨ Good Job👏 👏 👏\n"
  exit 0

elif [ -z "${normalfiles}" ]; then
  printf "🏷️ There's no Swift file on Staging Area"
  printf "\n ✔ Please proceed with git add first:)"
  exit 1

elif [ -z "$targets" ]; then
  printf "🏷️ There's no Swift file on Staging Area"
  printf "\n ✔ Please proceed with git add first:)"
  exit 1
fi

# lint rule 정의 파일
RESULT=$($LINT lint --quiet --config .swiftlint.yml --strict)

if [ "$RESULT" == '' ]; then
    printf "✨ Completed applying SwiftLint!! Good Job:)\n"
else
    echo ""
    printf "✔ SwiftLint Failed. Please check the details below :\n"
    while read -r line; do
        FILEPATH=$(echo $line | cut -d : -f 1)
        L=$(echo $line | cut -d : -f 2)
        C=$(echo $line | cut -d : -f 3)
        TYPE=$(echo $line | cut -d : -f 4 | cut -c 2-)
        MESSAGE=$(echo $line | cut -d : -f 5 | cut -c 2-)
        DESCRIPTION=$(echo $line | cut -d : -f 6 | cut -c 2-)
        if [ $TYPE == 'warning' ]; then
            printf "\n 🚧  $TYPE\n"
            # warning 타입은 오류메시지만 표시하고 커밋을 허용하고 싶다면 아래 주석을 해제하세요.
            # printf "    $FILEPATH:$L:$C\n"
            # printf "    📌  $MESSAGE: - $DESCRIPTION\n"
            # exit 0
        elif [ $TYPE == 'error' ]; then
            printf "\n 🚨  $TYPE\n"
        fi
        printf "    ✔ $FILEPATH:$L:$C\n"
        printf "    📌 $MESSAGE: - $DESCRIPTION\n"
    done <<< "$RESULT"

    printf "\n 🚑  Commit failed!! Please change the code according to SwiftLint rules.:)\n"
    exit 1
fi
